"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import os

from django.urls import reverse_lazy

from backend.app_settings.common.setting_helpers import *

# import basic path settings
import_all('backend.app_settings.common.path_settings', globals())

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env('DEBUG', strict=False, default='True') == 'True'

# Load environmental variable for development when DEBUG=True.
# Strict environment variables you should care about:
#  - DB_PASS
#  - SECRET_KEY
#  - GOOGLE_OAUTH2_CLIENT_ID
#  - GOOGLE_OAUTH2_CLIENT_SECRET
if DEBUG:
    # noinspection PyUnresolvedReferences
    set_env_from_file(os.path.join(PROJECT_DIR, 'develop_env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('SECRET_KEY', strict=True)

ALLOWED_HOSTS = ['*', ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3rd party apps
    'corsheaders',
    'django_celery_results',  # django-celery-results
    'oauth2_provider',  # django-oauth-toolkit
    'rest_framework',   # djangorestframework
    'social.apps.django_app.default',  # python-social-auth

    # our apps
    'backend',
    'emails',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # python-social-auth
                'social.apps.django_app.context_processors.backends',
                'social.apps.django_app.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': get_env('DB_NAME', strict=False, default='lifemotif'),
        'USER': get_env('DB_USER', strict=False, default='lifemotif'),
        'PASSWORD': get_env('DB_PASS', strict=True),
        'HOST': get_env('DB_HOST', strict=False, default='localhost'),
        'PORT': get_env('DB_PORT', strict=False, default='3306'),
        'CHARSET': 'utf8',
        'COLLATION': 'utf8mb4',
    }
}

AUTHENTICATION_BACKENDS = [
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend',
]

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# django.contrib.auth settings
# login url
LOGIN_URL = reverse_lazy('users:login')

LOGOUT_URL = reverse_lazy('users:logout')

LOGIN_REDIRECT_URL = reverse_lazy('users:profile')


# this should be before STATICFILES_DIRS!
import_all('backend.app_settings.backend', globals())

# import celery settings
import_all('backend.app_settings.celery', globals())

# import python_social_auth settings
import_all('backend.app_settings.social_auth', globals())

# import rest_framework settings
import_all('backend.app_settings.rest_framework', globals())

# import corsheaders settings
import_all('backend.app_settings.corsheaders', globals())

# import oauth2_provider settings
import_all('backend.app_settings.oauth2_provider', globals())


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# noinspection PyUnresolvedReferences
STATICFILES_DIRS = (
    LIFEMOTIF_DEFAULT_STATICFILES_DIR,
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)-8s %(asctime)s '
                      '%(module)s %(process)d %(thread)d %(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)-8s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'DEBUG',
            'filters': [],
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR.child('logs').child('lifemotif.log'),
            'formatter': 'verbose',
            'filters': [],
            'level': 'DEBUG',
            'maxBytes': 200 * 1024,  # 200KiB
            'backupCount': 10,       # 10 files
            'encoding': 'utf-8',
        },
        'admin_mail': {
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'level': 'ERROR',
            'filters': ['require_debug_false', ],
        },
        'null': {
            'class': 'logging.NullHandler',
            'level': 'DEBUG',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['null', ],
            'propagate': True,
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['admin_mail', ],
            'level': 'ERROR',
            'propagate': False,
        },
        'backend': {
            'handlers': ['console', 'file', 'admin_mail', ],
            'level': 'DEBUG',
        },
        'emails': {
            'handlers': ['console', 'file', 'admin_mail', ],
            'level': 'DEBUG',
        },
    }
}
